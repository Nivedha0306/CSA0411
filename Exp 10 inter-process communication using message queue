#include <stdio.h>
#include <stdlib.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>
#include <unistd.h>
#define MAX_TEXT 100
struct message {
    long msg_type;
    char msg_text[MAX_TEXT];
};
int main() {
    key_t key;
    int msgid;
    struct message msg;
    key = ftok("msgfile", 65);
    msgid = msgget(key, 0666 | IPC_CREAT);
    if (msgid == -1) {
        perror("msgget failed");
        exit(1);
    }
    pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
pid_t pid = fork();

    if (pid < 0) {
        perror("fork failed");
        exit(1);
    }

    else if (pid == 0) 
        sleep(1);
        if (msgrcv(msgid, &msg, sizeof(msg.msg_text), 1, 0) == -1) {
            perror("msgrcv failed");
            exit(1);
        }
        printf("Child Process Received Message: %s\n", msg.msg_text);
        exit(0);
    }

    else {
        msg.msg_type = 1; // Message type
        strcpy(msg.msg_text, "Hello from Parent Process!");
        if (msgsnd(msgid, &msg, sizeof(msg.msg_text), 0) == -1) {
            perror("msgsnd failed");
            exit(1);
        }
        printf("Parent Process Sent Message: %s\n", msg.msg_text);
        wait(NULL); 
        msgctl(msgid, IPC_RMID, NULL);
    }

    return 0;
}

