#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
sem_t rw_mutex;     
sem_t mutex;        
int read_count = 0;
void *reader(void *arg) {
    int id = *((int *)arg);
   while (1) {
        sem_wait(&mutex);            
        read_count++;
        if (read_count == 1) {
            sem_wait(&rw_mutex);  
        }
        sem_post(&mutex);
        printf("Reader %d is reading...\n", id);
        sleep(1);
        sem_wait(&mutex);
        read_count--;
        if (read_count == 0) {
            sem_post(&rw_mutex); 
        }
        sem_post(&mutex);

        sleep(1);
    }
}

void *writer(void *arg) {
    int id = *((int *)arg);

    while (1) {
        sem_wait(&rw_mutex);  
        printf("Writer %d is writing...\n", id);
        sleep(1);
    sem_post(&rw_mutex);  
        sleep(1);
    }
}
int main() {
    pthread_t r_threads[3], w_threads[2];
    int r_ids[3] = {1, 2, 3};
    int w_ids[2] = {1, 2};
    sem_init(&mutex, 0, 1);
    sem_init(&rw_mutex, 0, 1);
    for (int i = 0; i < 3; i++) {
        pthread_create(&r_threads[i], NULL, reader, &r_ids[i]);
    }
    for (int i = 0; i < 2; i++) {
        pthread_create(&w_threads[i], NULL, writer, &w_ids[i]);
    }
    for (int i = 0; i < 3; i++) {
        pthread_join(r_threads[i], NULL);
    }
    for (int i = 0; i < 2; i++) {
        pthread_join(w_threads[i], NULL);
    }
     sem_destroy(&mutex);
    sem_destroy(&rw_mutex);
      return 0;
}
