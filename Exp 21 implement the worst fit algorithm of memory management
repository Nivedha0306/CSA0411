#include <stdio.h>
int main() {
    int blockSize[10], processSize[10], blockAllocated[10];
    int numBlocks, numProcesses;
    printf("Enter number of memory blocks: ");
    scanf("%d", &numBlocks);
    printf("Enter the size of each block:\n");
    for(int i = 0; i < numBlocks; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
        blockAllocated[i] = 0;  // Initially unallocated
    }
    printf("\nEnter number of processes: ");
    scanf("%d", &numProcesses);
    printf("Enter the size of each process:\n");
    for(int i = 0; i < numProcesses; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }
     int allocation[10];
    for(int i = 0; i < numProcesses; i++)
        allocation[i] = -1; // Initialize allocation as unassigne
    for(int i = 0; i < numProcesses; i++) {
        int worstIndex = -1;
        for(int j = 0; j < numBlocks; j++) {
            if(blockAllocated[j] == 0 && blockSize[j] >= processSize[i]) {
                if (worstIndex == -1 || blockSize[j] > blockSize[worstIndex]) {
                    worstIndex = j;
                }
            }
        }
        
        if(worstIndex != -1) {
            allocation[i] = worstIndex;
            blockAllocated[worstIndex] = 1; // Mark block as allocated
            blockSize[worstIndex] -= processSize[i];
        }
    }
    printf("\nProcess No.\tProcess Size\tBlock No.\n");
    for(int i = 0; i < numProcesses; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        if(allocation[i] != -1)
            printf("%d\n", allocation[i] + 1);
        else
            printf("Not Allocated\n");
    }

    return 0;
}
