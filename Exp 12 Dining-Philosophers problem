#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>
#define N 5  
pthread_mutex_t forks[N];  // Mutex for each fork
pthread_t philosophers[N];
void* philosopher(void* num) {
    int id = *(int*)num;
    while(1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(1);
        if (id % 2 == 0) {
            pthread_mutex_lock(&forks[id]);           
            pthread_mutex_lock(&forks[(id + 1) % N]);
        } else {
            pthread_mutex_lock(&forks[(id + 1) % N]); 
            pthread_mutex_lock(&forks[id]);         
        }
        printf("Philosopher %d is eating.\n", id);
        sleep(1);
        pthread_mutex_unlock(&forks[id]);
        pthread_mutex_unlock(&forks[(id + 1) % N]);
         printf("Philosopher %d finished eating and is thinking again.\n", id);
        sleep(1);
    }

    pthread_exit(NULL);
}

int main() {
    int i;
    int ids[N];
    for (i = 0; i < N; i++) {
        pthread_mutex_init(&forks[i], NULL);
    }
    for (i = 0; i < N; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, (void*)&ids[i]);
    }
    for (i = 0; i < N; i++) {
        pthread_join(philosophers[i], NULL);
    }
    for (i = 0; i < N; i++) {
        pthread_mutex_destroy(&forks[i]);
    }

    return 0;
}
