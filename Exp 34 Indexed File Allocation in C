#include <stdio.h>
#include <stdlib.h>
#define MAX_BLOCKS 100
int main() {
    int disk[MAX_BLOCKS] = {0};  // 0 = free, 1 = allocated
    int indexBlock, n, fileBlocks[50];
    int i, blockNum;
   printf("Indexed File Allocation Simulation\n");
    printf("----------------------------------\n");
    printf("Enter the index block number (0-%d): ", MAX_BLOCKS - 1);
    scanf("%d", &indexBlock);
    if (indexBlock < 0 || indexBlock >= MAX_BLOCKS) {
        printf("Invalid block number!\n");
        return 0;
    }
     if (disk[indexBlock] == 1) {
        printf("Index block already allocated! Try another.\n");
        return 0;
    }
    disk[indexBlock] = 1;
    printf("Index Block %d allocated successfully.\n", indexBlock);
    printf("Enter the number of blocks needed for the file: ");
    scanf("%d", &n);
    printf("Enter the block numbers for the file:\n");
    for (i = 0; i < n; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockNum);

        if (blockNum < 0 || blockNum >= MAX_BLOCKS) {
            printf("Invalid block number! Try again.\n");
            i--;
            continue;
        }

        if (disk[blockNum] == 0) {
            disk[blockNum] = 1;
            fileBlocks[i] = blockNum;
        } else {
            printf("Block %d is already allocated. Enter a different block.\n", blockNum);
            i--;
        }
    }
    printf("\nFile allocated using index block %d.\n", indexBlock);
    printf("Index block contains pointers to the following blocks:\n");
    for (i = 0; i < n; i++) {
        printf("File Block %d -> Disk Block %d\n", i + 1, fileBlocks[i]);
    }

    return 0;
}
